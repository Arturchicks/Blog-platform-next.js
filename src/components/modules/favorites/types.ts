import { Params, QueryArticle } from "@/store/types";
import { SerializedError } from "@reduxjs/toolkit";
import {
  BaseQueryError,
  BaseQueryFn,
  TypedMutationTrigger,
} from "@reduxjs/toolkit/query/react";

type UseMutationTrigger<T> = (arg: Params) => Promise<
  { data: T } | { error: BaseQueryError<BaseQueryFn> | SerializedError }
> & {
  requestId: string; // A string generated by RTK Query
  abort: () => void; // A method to cancel the mutation promise
  unwrap: () => Promise<T>; // A method to unwrap the mutation call and provide the raw response/error
  reset: () => void; // A method to manually unsubscribe from the mutation call and reset the result to the uninitialized state
};

export interface FavoritesType {
  onToggleLike: UseMutationTrigger<QueryArticle>;
  count: number;
  liked: boolean;
  slug: string;
  className?: string;
}
