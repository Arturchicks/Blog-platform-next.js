import { Ref } from "react"
import { BaseQueryError, BaseQueryFn } from "@reduxjs/toolkit/dist/query/react"
import { MutationLike } from "shared/redux/types"
import { SerializedError } from "@reduxjs/toolkit"
export interface Author {
  username: string
  bio: string
  image: string
  following: boolean
}
type onTagClick = (arg: string) => void

export interface IArticle {
  className: string
  slug: string
  title: string
  description: string
  body: string
  tagList: string[]
  createdAt: string
  updatedAt: string
  favorited: false
  favoritesCount: number
  author: Author
  onTagCLick: onTagClick
}

export interface Params {
  slug: string
  method: string | undefined
}
type UseMutationTrigger<T> = (arg: Params) => Promise<
  { data: T } | { error: BaseQueryError<BaseQueryFn> | SerializedError }
> & {
  requestId: string // A string generated by RTK Query
  abort: () => void // A method to cancel the mutation promise
  unwrap: () => Promise<T> // A method to unwrap the mutation call and provide the raw response/error
  reset: () => void // A method to manually unsubscribe from the mutation call and reset the result to the uninitialized state
}

export interface ICount {
  invalidate?: Ref<boolean>
  count: number
  liked: boolean
  slug: string
  onToggleLike: UseMutationTrigger<MutationLike>
  className: string
}
